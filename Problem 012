Highly Divisible Triangular Number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

#python solution
import math
target = 500
numberOfFactors = 0
counter = 1
result = 0
while (numberOfFactors < target):
    counter += 1
    result = 0
    for i in range(1, counter + 1):
        result += i
    numberOfFactors = 0
    for j in range (1, math.ceil(math.sqrt(result))):
        if result % j == 0:
            numberOfFactors += 2 # including paired factor greater than the square root
    if math.sqrt(result) % 1 == 0.0:
        numberOfFactors += 1 # account for square root as factor
print(result)

//java solution
int target = 500;
int numberOfFactors = 0;
int counter = 1;
int result = 0;
while (numberOfFactors < target) {
    counter++;
    result = 0;
    for (int i = 1; i < counter + 1; i++) {
        result += i;
    }
    numberOfFactors = 0;
    for (int j = 1; j < Math.ceil(Math.pow(result, 0.5)); j++) {
        if (result % j == 0) {
            numberOfFactors += 2; //including paired factor greater than the square root
        }
    }
    if (Math.pow(result, 0.5) % 1 == 0) {
        numberOfFactors++; //account for square root as factor
    }
}
System.out.print(result);
